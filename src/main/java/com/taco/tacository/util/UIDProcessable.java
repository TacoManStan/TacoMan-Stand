package com.taco.tacository.util;

/**
 * <p>TO-DOC</p>
 */
public interface UIDProcessable extends UID {
    
    /**
     * <p>Returns the {@link UIDProcessor} instance for this {@link UIDProcessable} object.</p>
     * <hr><br>
     * <h4>Example Implementation</h4>
     * <pre>{@code private UIDProcessor uIDContainer;
     *
     * //...
     *
     * @Override
     * public UIDProcessor getUIDProcessor()
     * {
     *     if (uIDContainer == null) // Lazy Initialization
     *         uIDContainer = new UIDProcessor("group-name");
     *     return uIDContainer;
     * }}</pre>
     * <br>
     * <h4>Details</h4>
     * <ol>
     *     <li>In most cases, it is recommended that {@link UIDProcessor} objects are stored as lazy-initialized singleton field variables as shown in the example above.</li>
     *     <li>
     *         The keys randomly generated by the {@link UIDProcessor} have a functionally-zero percent chance of overlapping.
     *         <ul>
     *             <li>However, setting the {@code group name} to an appropriate value is good practice and, at the very least, adds an extra layer of debug information.</li>
     *             <li>Refer to <i>{@link UID#getGroupID()}</i> for additional information.</li>
     *         </ul>
     *     </li>
     * </ol>
     *
     * @return The {@link UIDProcessor} instance for this {@link UIDProcessable} object.
     */
    UIDProcessor getUIDProcessor();
    
    /**
     * {@inheritDoc}
     * <blockquote><b>Passthrough Definition:</b> <i><code>{@link #getUIDProcessor()}<b>.</b>{@link UIDProcessor#getUID(Object...) getUID}<b>(</b>{@link Object}<b>)</b></code></i></blockquote>
     */
    @Override
    default String getUID(Object... params) {
        return getUIDProcessor().getUID(params);
    }
    
    /**
     * {@inheritDoc}
     * <blockquote><b>Passthrough Definition:</b> <i><code>{@link #getUIDProcessor()}<b>.</b>{@link UIDProcessor#getGroupID() getGroupID()}</code></i></blockquote>
     */
    @Override
    default String getGroupID() {
        return getUIDProcessor().getGroupID();
    }
}
